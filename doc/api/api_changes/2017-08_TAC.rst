:meth:`matpltolib.cbook.CallbackRegistry.process` suppresses exceptions by default
``````````````````````````````````````````````````````````````````````````````````

Matplotlib uses instances of :obj:`~matplotlib.cbook.CallbackRegistry`
as a bridge between user input event from the GUI and user callbacks.
Previously, any exceptions raised in a user call back would bubble out
of of the ``process`` method, which is typically in the GUI event
loop.  Most GUI frameworks simple print the traceback to the screen
and continue as there is not always a clear method of getting the
exception back to the user.  However PyQt5 now exits the process when
it receives and un-handled python exception in the event loop.  Thus,
:meth:`~matplotlib.cbook.CallbackRegistry.process` now suppresses and
prints tracebacks to stderr by default.

What :meth:`~matplotlib.cbook.CallbackRegistry.process` does with exceptions
is now user configurable via the ``exception_handler`` attribute and kwarg.  To
restore the previous behavior pass ``None`` ::

  cb = CallbackRegistry(exception_handler=None)


A function which take and ``Exception`` as its only argument may also be passed ::

  def maybe_reraise(excp):
      if isinstance(excp, RuntimeError):
          pass
      else:
          raise excp

  cb = CallbackRegistry(exception_handler=maybe_reraise)
